// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name fanmeter_sdk_ios
import CommonCrypto
import CoreMotion
import CoreTelephony
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import fanmeter_sdk_ios
import os
@_hasMissingDesignatedInitializers public class EntryPoint {
  public class func execute(externalUserId: Swift.String, externalTokenId: Swift.String, notificationData: [Swift.AnyHashable : Any], externalUserEmail: Swift.String?, fcmToken: Swift.String?, ticketNumber: Swift.String?, ticketStand: Swift.String?, log: Swift.Bool?) -> Swift.String
  public class func launchFanmeterView(companyName: Swift.String, licenseKey: Swift.String, externalUserId: Swift.String, externalTokenId: Swift.String, externalUserEmail: Swift.String?, fcmToken: Swift.String?, ticketNumber: Swift.String?, ticketStand: Swift.String?, log: Swift.Bool?) -> Swift.String
  public class func isServiceRunning(callback: (Swift.Int) -> ())
  public class func startService(companyName: Swift.String, licenseKey: Swift.String, eventTitle: Swift.String, externalUserId: Swift.String, externalTokenId: Swift.String, externalUserEmail: Swift.String?, fcmToken: Swift.String?, ticketNumber: Swift.String?, ticketStand: Swift.String?, log: Swift.Bool?, callback: ((Swift.Int) -> ())? = nil)
  public class func stopService(log: Swift.Bool?, callback: ((Swift.Int) -> ())? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class EntryPointBridge : ObjectiveC.NSObject {
  @objc public class func execute(externalUserId: Swift.String, externalTokenId: Swift.String, notificationData: [Swift.AnyHashable : Any], externalUserEmail: Swift.String?, fcmToken: Swift.String?, ticketNumber: Swift.String?, ticketStand: Swift.String?, log: Foundation.NSNumber?) -> Swift.String
  @objc public class func launchFanmeterView(companyName: Swift.String, licenseKey: Swift.String, externalUserId: Swift.String, externalTokenId: Swift.String, externalUserEmail: Swift.String?, fcmToken: Swift.String?, ticketNumber: Swift.String?, ticketStand: Swift.String?, log: Foundation.NSNumber?) -> Swift.String
  @objc public class func isServiceRunning(callback: (Swift.Int) -> ())
  @objc public class func startService(companyName: Swift.String, licenseKey: Swift.String, eventTitle: Swift.String, externalUserId: Swift.String, externalTokenId: Swift.String, externalUserEmail: Swift.String?, fcmToken: Swift.String?, ticketNumber: Swift.String?, ticketStand: Swift.String?, log: Foundation.NSNumber?, callback: ((Swift.Int) -> ())? = nil)
  @objc public class func stopService(log: Foundation.NSNumber?, callback: ((Swift.Int) -> ())? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SensorFeedHandler : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public static var shared: fanmeter_sdk_ios.SensorFeedHandler
  @objc override dynamic public init()
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManagerDidPauseLocationUpdates(_ manager: CoreLocation.CLLocationManager)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc deinit
}
